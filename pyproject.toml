[tool.poetry]
name = "ssb-eimerdb"
version = "0.1.4"
description = "EimerDB"
authors = ["Stian Elisenberg <seg@ssb.no>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/statisticsnorway/ssb-eimerdb"
repository = "https://github.com/statisticsnorway/ssb-eimerdb"
documentation = "https://statisticsnorway.github.io/ssb-eimerdb"
packages = [{ include = "eimerdb", from = "src" }]
classifiers = ["Development Status :: 3 - Alpha"]

[tool.poetry.urls]
Changelog = "https://github.com/statisticsnorway/ssb-eimerdb/releases"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
click = ">=8.0.1"
duckdb = "^0.10.0"
google-cloud-storage = "^2.15.0"
pyarrow = "14.0.2"
dapla-toolbelt = "^2.0.8"
uuid = "^1.30"
ipykernel = "^6.29.3"
pandas = "^2.2.1"
parameterized = {extras = ["typed"], version = "^0.9.0"}

[tool.poetry.group.dev.dependencies]
Pygments = ">=2.10.0"
bandit = ">=1.7.4"
black = { extras = ["jupyter"], version = ">=23.1.0" }
coverage = { extras = ["toml"], version = ">=6.2" }
darglint = ">=1.8.1"
flake8 = ">=4.0.1"
flake8-bugbear = ">=21.9.2"
flake8-docstrings = ">=1.6.0"
flake8-rst-docstrings = ">=0.2.5"
furo = ">=2021.11.12"
isort = ">=5.10.1"
mypy = ">=0.930"
pep8-naming = ">=0.12.1"
pre-commit = ">=2.16.0"
pre-commit-hooks = ">=4.1.0"
pytest = ">=6.2.5"
pyupgrade = ">=2.29.1"
safety = ">=1.10.3"
sphinx = ">=6.2.1"
sphinx-autobuild = ">=2021.3.14"
sphinx-autodoc-typehints = ">=1.24.0"
sphinx-click = ">=3.0.2"
typeguard = ">=2.13.3"
xdoctest = { extras = ["colors"], version = ">=0.15.10" }
myst-parser = { version = ">=0.16.1" }

[tool.pytest.ini_options]
pythonpath = ["src"]

[tool.poetry.scripts]
ssb-eimerdb = "eimerdb.__main__:main"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["eimerdb", "tests"]
relative_files = true

[tool.coverage.report]
show_missing = true
fail_under = 50

[tool.mypy]
strict = false
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true

[[tool.mypy.overrides]]
# Allow missing type hints in third-party libraries without type information.
module = [
    "duckdb.*",
    "gcsfs.*",
    "google.cloud.*",
    "pandas.*",
    "pyarrow.*",
    "parameterized.*",
]
ignore_missing_imports = true

[tool.ruff]
force-exclude = true  # Apply excludes to pre-commit
show-fixes = true
src = ["src", "tests"]
target-version = "py39"  # Minimum Python version supported
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
extend-exclude = [
    "__pycache__",
    "old",
    ".ipynb_checkpoints",
    "noxfile.py",
    "docs/conf.py",
]

# Ruff rules may be customized as desired: https://docs.astral.sh/ruff/rules/
[tool.ruff.lint]
select = [
    "A", # prevent using keywords that clobber python builtins
    "ANN", # check type annotations
    "B", # bugbear: security warnings
    "D", # documentation
    "E", # pycodestyle
    "F", # pyflakes
    "ISC", # implicit string concatenation
    "I", # sort imports
    "UP", # alert you when better syntax is available in your python version
    "RUF", # the ruff developer's own rules
]
ignore = [
    "ANN101", # Supress missing-type-self.
    "ANN102", # Supress missing-type-cls.
    "ANN202", # Don't requiere return type annotation for private functions.
    "ANN401", # Allow type annotation with type Any.
    "D100", # Supress undocumented-public-module. Only doc of public api required.
    "E402", # Supress module-import-not-at-top-of-file, needed in jupyter notebooks.
    "E501", # Supress line-too-long warnings: trust black's judgement on this one.
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "google"  # You can also use "numpy".

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "validator", "root_validator", "pydantic.validator"]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]
"**/tests/*" = [
    "ANN001", # type annotations don't add value for test functions
    "ANN002", # type annotations don't add value for test functions
    "ANN003", # type annotations don't add value for test functions
    "ANN201", # type annotations don't add value for test functions
    "ANN204", # type annotations don't add value for test functions
    "ANN205", # type annotations don't add value for test functions
    "ANN206", # type annotations don't add value for test functions
    "D100", # docstrings are overkill for test functions
    "D101",
    "D102",
    "D103",
    "S101", # asserts are encouraged in pytest
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
